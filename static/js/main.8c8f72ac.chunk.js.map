{"version":3,"sources":["components/Wrapper.js","components/Jumbotron.js","components/Card.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Jumbotron","Card","onClick","id","style","width","alt","name","src","image","Nav","score","highScore","feedback","App","state","characters","baseCharacters","feedBack","guessed","checkArr","_this","map","character","arr","length","includes","setState","reset","filter","shuffle","array","sort","Math","random","_this2","this","components_Nav","components_Wrapper","components_Jumbotron","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c8f72ac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"container\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react'\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"text-center row\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron","import React from \"react\"\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div onClick={()=>props.onClick(props.id)} className=\"card\" style={{width: 16 +'rem'}}>\r\n            <img alt={props.name} src={props.image} className=\"card-img-top\" />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <div className=\"banner\">\r\n            <h3>Score: {props.score}</h3>\r\n            <h3>High Score: {props.highScore}</h3>\r\n            <h3>{props.feedback}</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Nav;","import React, { Component } from 'react';\nimport './App.css';\nimport characters from \"./friends.json\"\nimport Wrapper from \"./components/Wrapper\"\nimport Jumbotron from './components/Jumbotron'\nimport Card from './components/Card'\nimport Nav from './components/Nav'\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    characters: characters,\n    baseCharacters: characters,\n    highScore: 0,\n    feedBack: \"\"\n  }\n\n  //compares the character id that was clicked, with the remaining character.id still in the characters array\n  guessed = id => {\n\n    const checkArr = this.state.characters.map(character => {\n      if (character.id === id) {\n        return true\n      } else return false\n    });\n    this.checkArr(checkArr, id)\n  };\n  //carries out proper steps depending on whether or not a match was found\n  checkArr = (arr, id) => {\n    if (arr.length === 1 && arr.includes(true)) {\n      this.setState({ feedBack: \"You win!\" });\n      this.setState({ highScore: this.state.baseCharacters.length });\n      this.reset();\n    }\n    else if (arr.includes(true)) {\n      this.setState({ score: this.state.score + 1 });\n      const characters = this.state.characters.filter(character => character.id !== id);\n      this.setState({ characters: characters });\n      this.setState({ feedBack: \"You've guessed correctly\" })\n      this.shuffle(this.state.baseCharacters)\n    } else {\n      if (this.state.score > this.state.highScore) {\n        this.setState({ highScore: this.state.score });\n      };\n      this.setState({ feedBack: \"You've guessed incorrectly\" })\n      this.reset();\n    }\n  };\n  //resets to original state\n  reset = () => {\n    this.shuffle(this.state.baseCharacters)\n    this.setState({ score: 0 })\n    this.setState({ characters: this.state.baseCharacters })\n  };\n  //used to shuffle the baseCharacter array which displays the characters to the user\n  shuffle = array => {\n    array.sort(() => Math.random() - 0.5);\n    this.setState({ baseCharacters: array })\n  };\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          highScore={this.state.highScore}\n          feedback={this.state.feedBack ? this.state.feedBack : \"Click a character to begin\"} />\n        <Wrapper>\n          <Jumbotron>\n            {this.state.baseCharacters.map(character => {\n              return <Card\n                onClick={this.guessed}\n                key={character.id}\n                id={character.id}\n                alt={character.name}\n                image={character.image} />\n            })}\n          </Jumbotron>\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}